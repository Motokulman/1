# Generated by Django 3.0.3 on 2020-02-26 10:22

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Algorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('var_name', models.CharField(default='default_identifier', help_text='Имя переменной, идентификатор для исопльзования в коде', max_length=200, unique=True)),
                ('name', models.CharField(help_text='Название для понимания', max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Алгоритм',
                'verbose_name_plural': 'Алгоритмы',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Brand_0',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите бренд, например, Wienerberger', max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Основоной бренд (Бренд_0)',
                'verbose_name_plural': 'Основоные бренды (Бренд_0)',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите город', max_length=200)),
            ],
            options={
                'verbose_name': 'Город',
                'verbose_name_plural': 'Города',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ClassB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='default_identifier', help_text='Уникальный неизменяемый идентификатор (только латинские символы)', max_length=200, unique=True)),
                ('name', models.CharField(help_text='Введите класс В', max_length=5)),
            ],
            options={
                'verbose_name': 'Класс В бетона',
                'verbose_name_plural': 'Классы В бетонов',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ClassАverageDensity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='default_identifier', help_text='Уникальный неизменяемый идентификатор (только латинские символы)', max_length=200, unique=True)),
                ('name', models.CharField(help_text='Введите класс средней плотности', max_length=5)),
            ],
            options={
                'verbose_name': 'Класс средней плотности',
                'verbose_name_plural': 'Классы средней плотности',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Введите страну', max_length=200, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Страна',
                'verbose_name_plural': 'Страны',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Factory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите просторе название производителя материала. Например, Кощаковский, Чайковский и т.д.', max_length=200, unique=True)),
                ('brand_0', models.ForeignKey(blank=True, help_text='Выберите бренд (например, Wienerberger), если есть', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Brand_0')),
                ('city', models.ForeignKey(blank=True, help_text='Выберите город', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.City')),
            ],
            options={
                'verbose_name': 'Производитель материала',
                'verbose_name_plural': 'Производители материалов (конкретные заводы)',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MarkD',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='default_identifier', help_text='Уникальный неизменяемый идентификатор (только латинские символы)', max_length=200, unique=True)),
                ('name', models.CharField(help_text='Введите марку D', max_length=5)),
            ],
            options={
                'verbose_name': 'Марка D',
                'verbose_name_plural': 'Марки D',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MarkF',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='default_identifier', help_text='Уникальный неизменяемый идентификатор (только латинские символы)', max_length=200, unique=True)),
                ('name', models.CharField(help_text='Введите марку морозостойкости F', max_length=5)),
            ],
            options={
                'verbose_name': 'Марка морозостойкости F',
                'verbose_name_plural': 'Марки морозостойкости F',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='MarkM',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='default_identifier', help_text='Уникальный неизменяемый идентификатор (только латинские символы)', max_length=200, unique=True)),
                ('name', models.CharField(help_text='Введите марку М', max_length=5)),
            ],
            options={
                'verbose_name': 'Марка М',
                'verbose_name_plural': 'Марки М',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='NFSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(default='default_identifier', help_text='Уникальный неизменяемый идентификатор (только латинские символы)', max_length=200, unique=True)),
                ('name', models.CharField(help_text='Введите название размера', max_length=200)),
                ('greater_bed_size', models.IntegerField(blank=True, help_text='Больший размер постели (длина), мм', null=True)),
                ('minor_bed_size', models.IntegerField(blank=True, help_text='Меньший размер постели (ширина), мм', null=True)),
                ('height', models.IntegerField(blank=True, help_text='Высота (толщина), мм', null=True)),
            ],
            options={
                'verbose_name': 'Размер НФ',
                'verbose_name_plural': 'Размеры НФ',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='RockWallMaterialUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('brick', 'Кирпич'), ('rock', 'Камень'), ('block', 'Блок')], default='brick', help_text='Вид изделия', max_length=5)),
                ('material', models.CharField(choices=[('ceramic', 'керамический'), ('silicate', 'силикатный'), ('clinker', 'клинкерный'), ('gas_concrete', 'газобетонный'), ('ceramsite_concrete', 'керамзитобетонный')], default='ceramic', help_text='Материал изделия', max_length=18)),
                ('greater_bed_size', models.IntegerField(blank=True, help_text='Больший размер постели (длина), мм. (размер А)', null=True)),
                ('minor_bed_size', models.IntegerField(blank=True, help_text='Меньший размер постели (ширина), мм. (размер В)', null=True)),
                ('height', models.IntegerField(blank=True, help_text='Высота (толщина), мм. (размер С), или наименьший размер, если постель не очевидна', null=True)),
                ('min_pix_1_floor', models.CharField(choices=[('1', '1'), ('1.5', '1,5'), ('2', '2'), ('2.5', '2,5'), ('3', '3'), ('no', 'Не применимо')], default='no', help_text='Минимальная тощина в кирпичах для 1 этажного дома', max_length=3)),
                ('min_pix_2_floor', models.CharField(choices=[('1', '1'), ('1.5', '1,5'), ('2', '2'), ('2.5', '2,5'), ('3', '3'), ('no', 'Не применимо')], default='no', help_text='Минимальная тощина в кирпичах для 2-х этажного дома', max_length=3)),
                ('min_pix_3_floor', models.CharField(choices=[('1', '1'), ('1.5', '1,5'), ('2', '2'), ('2.5', '2,5'), ('3', '3'), ('no', 'Не применимо')], default='no', help_text='Минимальная тощина в кирпичах для 3-х этажного дома', max_length=3)),
                ('work_size_1', models.CharField(choices=[('a', 'А'), ('b', 'В'), ('c', 'С'), ('no', 'Нет')], default='no', help_text='Выберите первый рабочий размер, если есть', max_length=2)),
                ('num_floors_on_work_size_1', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('0', 'Нет')], default='0', help_text='Сколько этажей можно постороить на этом размере', max_length=1)),
                ('work_size_2', models.CharField(choices=[('a', 'А'), ('b', 'В'), ('c', 'С'), ('no', 'Нет')], default='no', help_text='Выберите второй рабочий размер, если есть', max_length=2)),
                ('num_floors_on_work_size_2', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('0', 'Нет')], default='0', help_text='Сколько этажей можно постороить на этом размере', max_length=1)),
                ('work_size_3', models.CharField(choices=[('a', 'А'), ('b', 'В'), ('c', 'С'), ('no', 'Нет')], default='no', help_text='Выберите третий рабочий размер, если есть', max_length=2)),
                ('num_floors_on_work_size_3', models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('0', 'Нет')], default='0', help_text='Сколько этажей можно постороить на этом размере', max_length=1)),
                ('thermal_conductivity', models.IntegerField(blank=True, help_text='Введите коэффициент теплопроводности', null=True)),
                ('tongue_and_groove', models.CharField(choices=[('no', 'Нет'), ('yes', 'Да')], default='no', help_text='Пазогребневая система', max_length=3)),
                ('polish', models.CharField(choices=[('no', 'Нет'), ('yes', 'Да')], default='no', help_text='Шлифованный', max_length=3)),
                ('purpose', models.CharField(choices=[('wall', 'Рядовой '), ('fasade', 'Лицевой'), ('decor_edge', 'Рядовой с декоративной гранью')], default='wall', help_text='Назначение: рядовой, лицевой', max_length=10)),
                ('partition_or_bearing', models.CharField(choices=[('partition', 'Перегородочный'), ('bearing', 'Несущий'), ('any', 'Любой')], default='bearing', help_text='Для несущих стен, для перегородок или для всего', max_length=9)),
                ('body_type', models.CharField(choices=[('solid', 'Полнотелый'), ('hollow', 'Пустотелый')], default='solid', help_text='Пустотелый или полнотелый', max_length=6)),
                ('blind_hollow', models.CharField(choices=[('no', 'Нет'), ('yes', 'Да')], default='no', help_text='Несквозные пустоты (для полнотелых кирпичей)', max_length=3)),
                ('primary_or_additional', models.CharField(choices=[('primary', 'Основной'), ('additional', 'Доборный')], default='primary', help_text='Тип элемента: основной или доборный', max_length=10)),
                ('algorithm', models.ForeignKey(blank=True, help_text='Выберите алгоритм для расчета', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Algorithm')),
                ('brand_0', models.ForeignKey(blank=True, help_text='Выберите бренд (Бренд 0), являющийся владельцем торговой марки, например, Wienerberger', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Brand_0')),
                ('class_average_density', models.ForeignKey(blank=True, help_text='Выберите стандартный класс средней плотности для данного материала, если есть', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.ClassАverageDensity')),
                ('class_b', models.ForeignKey(blank=True, help_text='Выберите стандартный класс В для данного материала, если есть', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.ClassB')),
                ('factory', models.ForeignKey(blank=True, help_text='Выберите завод изготовитель', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Factory')),
                ('mark_d', models.ForeignKey(blank=True, help_text='Выберите стандартную марку D для данного материала, если есть', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.MarkD')),
                ('mark_f', models.ForeignKey(blank=True, help_text='Выберите стандартную марку морозостойкости F для данного материала, если есть', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.MarkF')),
                ('mark_m', models.ForeignKey(blank=True, help_text='Выберите стандартную марку М для данного материала, если есть', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.MarkM')),
            ],
            options={
                'verbose_name': 'Единица стенового материала',
                'verbose_name_plural': 'Единицы стеновых материалов',
            },
        ),
        migrations.CreateModel(
            name='RockWallMaterialPricePosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField()),
                ('name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.RockWallMaterialUnit')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ценовая позиция',
                'verbose_name_plural': 'Ценовые позиции',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите регион', max_length=200, unique=True)),
                ('code', models.IntegerField(blank=True, help_text='Цифровой код региона', null=True, unique=True)),
                ('country', models.ForeignKey(blank=True, help_text='Страна', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.Country')),
            ],
            options={
                'verbose_name': 'Регион',
                'verbose_name_plural': 'Регионы',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheme_scale', models.IntegerField(blank=True, default=25, null=True, verbose_name='Начальный масштаб схемы')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Профиль пользователя',
                'verbose_name_plural': 'Профили пользователей',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('scheme_scale', models.FloatField(blank=True, null=True, verbose_name='Масштаб схемы')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
            },
        ),
        migrations.CreateModel(
            name='PileGrillageFoundationWorkPrices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('const_expenditure', models.FloatField(verbose_name='Постоянные трудозатраты, чел.час')),
                ('transportation_procurement_cost', models.FloatField(verbose_name='Транспортно-заготовительные расходы, рублей')),
                ('reinforcement_binding', models.FloatField(verbose_name='Вязка 1м арматуры ростверка, чел.час')),
                ('clamp', models.FloatField(verbose_name='Изготовление 1 хомута, чел.час')),
                ('pile_frame', models.FloatField(verbose_name='Изготовление свайного каркаса, чел.час')),
                ('formwork', models.FloatField(verbose_name='Установка 1кв.м. опалубки (ламфанера), чел.час')),
                ('length_costs', models.FloatField(verbose_name='Затраты, зависящие от длины ростверка, за 1 пог.м., чел.час')),
                ('square_costs', models.FloatField(verbose_name='Затраты, зависящие от площали ростверка, за 1 кв.м., чел.час')),
                ('volume_costs', models.FloatField(verbose_name='Затраты, зависящие от объема бетона ростверка, за 1 куб.м., чел.час')),
                ('pile_pour', models.FloatField(verbose_name='Заливка 1 сваи, чел.час')),
                ('man_hours_cost', models.IntegerField(verbose_name='Оплата рабочим за 1 чел.час')),
                ('man_hours_profit', models.IntegerField(verbose_name='Прибыль с 1 чел.часа')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Стоимость свайно-ростверкового фундамента',
                'verbose_name_plural': 'Стоимость свайно-ростверковых фундаментов',
            },
        ),
        migrations.AddField(
            model_name='city',
            name='region',
            field=models.ForeignKey(blank=True, help_text='Регион', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.Region'),
        ),
    ]
