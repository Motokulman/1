# Generated by Django 3.0.3 on 2020-11-13 14:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('legal', '0003_auto_20201105_1304'),
    ]

    operations = [
        migrations.CreateModel(
            name='CottageCommunity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Название коттежного поселка')),
                ('clarify', models.CharField(max_length=200, verbose_name='Уточнение на случай, если КП с таким названием несколько')),
            ],
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cadastral_number', models.CharField(max_length=20, verbose_name='Кадастровый номер')),
                ('cottage_community', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='land.CottageCommunity', verbose_name='Коттеджный посёлок')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Собственник участка')),
            ],
            options={
                'verbose_name': 'Участок',
                'verbose_name_plural': 'Участки',
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contractor', models.ForeignKey(help_text='Есть резон хранить и пользователя и организацию, от имени которой он проводит исследование', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contractor', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь-исполнитель')),
                ('customer', models.ForeignKey(help_text='Сделать здесь поиск пользователя по номеру телефона', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customer', to=settings.AUTH_USER_MODEL, verbose_name='Заказчик изыскания')),
                ('land', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='land.Land', verbose_name='Участок')),
                ('legal_entity', models.ForeignKey(help_text='Есть резон хранить и пользователя и организацию, от имени которой он проводит исследование', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='legal_entity', to='legal.LegalEntity', verbose_name='Организация-исполнитель')),
            ],
            options={
                'verbose_name': 'Геологическое изыскание',
                'verbose_name_plural': 'Геологические изыскания',
            },
        ),
        migrations.CreateModel(
            name='Well',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(default=1, verbose_name='Порядковый номер скважины')),
                ('height', models.IntegerField(default=0, verbose_name='Высота в сантиметрах устья скважины относительно других скважин, если есть. Самая низкая = 0')),
                ('Hw0', models.FloatField(blank=True, null=True, verbose_name='Уровень грунтовых вод появившийся')),
                ('Hw1', models.FloatField(blank=True, null=True, verbose_name='Уровень грунтовых вод установившийся')),
                ('F_2000_300', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 2 метра и диаметром 300мм')),
                ('F_2000_350', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 2 метра и диаметром 350мм')),
                ('F_2000_400', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 2 метра и диаметром 400мм')),
                ('F_2500_300', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 2.5 метра и диаметром 300мм')),
                ('F_2500_350', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 2.5 метра и диаметром 350мм')),
                ('F_2500_400', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 2.5 метра и диаметром 400мм')),
                ('F_3000_300', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 3 метра и диаметром 300мм')),
                ('F_3000_350', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 3 метра и диаметром 350мм')),
                ('F_3000_400', models.FloatField(blank=True, null=True, verbose_name='Несущая способность сваи глубиной 3 метра и диаметром 400мм')),
                ('survey', models.ForeignKey(help_text='Нужно, чтобы при создании скважины не приходилось выбирать исследование. Ведь это скважина для этого исследования', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='wells', to='land.Survey', verbose_name='Геологическое исследование')),
            ],
            options={
                'verbose_name': 'Скважина геологического изыскания',
                'verbose_name_plural': 'Скважины геологического изыскания',
            },
        ),
        migrations.CreateModel(
            name='Layer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(verbose_name='Номер слоя в скважине (уникален)')),
                ('power', models.FloatField(default=0, verbose_name='Мощность слоя, в метрах')),
                ('non_consolidated', models.BooleanField(default=False, verbose_name='Насыпной неконсолидированный грунт')),
                ('debris', models.BooleanField(default=False, verbose_name='Крупнообломочный строительный мусор')),
                ('Ros', models.FloatField(blank=True, null=True, verbose_name='Плотность частиц грунта, г/см.куб')),
                ('Rod', models.FloatField(blank=True, null=True, verbose_name='Плотность сухого грунта, г/см.куб')),
                ('W', models.FloatField(blank=True, null=True, verbose_name='Естественная влажность грунта W')),
                ('WP', models.FloatField(blank=True, null=True, verbose_name='Влажность на границе раскатывания Wp')),
                ('WL', models.FloatField(blank=True, null=True, verbose_name='Влажность на границе текучести WL')),
                ('m', models.FloatField(blank=True, null=True, verbose_name='Масса просеиваемой навески, грамм')),
                ('m250', models.FloatField(blank=True, null=True, verbose_name='Остаток на сите 2.5 мм, грамм')),
                ('m125', models.FloatField(blank=True, null=True, verbose_name='Остаток на сите 1.25 мм, грамм')),
                ('m063', models.FloatField(blank=True, null=True, verbose_name='Остаток на сите 0.63 мм, грамм')),
                ('m0315', models.FloatField(blank=True, null=True, verbose_name='Остаток на сите 0.315 мм, грамм')),
                ('m016', models.FloatField(blank=True, null=True, verbose_name='Остаток на сите 0.16 мм, грамм')),
                ('well', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='land.Well', verbose_name='Скважина')),
            ],
            options={
                'verbose_name': 'Слой грунта',
                'verbose_name_plural': 'Слои грунта',
            },
        ),
    ]
