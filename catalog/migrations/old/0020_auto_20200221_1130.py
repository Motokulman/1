# Generated by Django 3.0.2 on 2020-02-21 08:30

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0019_auto_20200220_1307'),
    ]

    operations = [
        migrations.CreateModel(
            name='Algorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('var_name', models.CharField(default='default_identifier', help_text='Имя переменной, идентификатор для исопльзования в коде', max_length=200, unique=True)),
                ('name', models.CharField(help_text='Название для понимания', max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Алгоритм',
                'verbose_name_plural': 'Алгоритмы',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TradeIndex',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите индекс серии товаров внутри торговой марки что внутри бренда, если она есть', max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Индекс серии товаров',
                'verbose_name_plural': 'Индексы серии товаров',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='TradeName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите торговую марку внутри бренда, например, Porotherm, Kerama и т.д.', max_length=200, unique=True)),
            ],
            options={
                'verbose_name': 'Торговая марка внутри бренда',
                'verbose_name_plural': 'Торговые марки внутри бренда',
                'ordering': ('name',),
            },
        ),
        migrations.RenameModel(
            old_name='ClassBLight',
            new_name='ClassB',
        ),
        migrations.RemoveField(
            model_name='customization',
            name='owner',
        ),
        migrations.RemoveField(
            model_name='grid',
            name='brand',
        ),
        migrations.RemoveField(
            model_name='grid',
            name='usage',
        ),
        migrations.RemoveField(
            model_name='provider',
            name='primary_activity',
        ),
        migrations.RemoveField(
            model_name='provider',
            name='secondary_activity',
        ),
        migrations.RemoveField(
            model_name='provider',
            name='tax_system',
        ),
        migrations.RemoveField(
            model_name='provideroutlet',
            name='city',
        ),
        migrations.RemoveField(
            model_name='provideroutlet',
            name='name',
        ),
        migrations.RemoveField(
            model_name='provideroutlet',
            name='owner',
        ),
        migrations.DeleteModel(
            name='WallReinforcementType',
        ),
        migrations.RemoveField(
            model_name='plan',
            name='customization',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='binding_solution',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='bounding',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='clinker',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='double_install',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='nf_size',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='porotherm_system',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='quantity_per_pallet',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='thickness_calc',
        ),
        migrations.RemoveField(
            model_name='rockwallmaterialunit',
            name='work_size',
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='min_pix_1_floor',
            field=models.CharField(choices=[('1', '1'), ('1.5', '1,5'), ('2', '2'), ('2.5', '2,5'), ('3', '3'), ('no', 'Не применимо')], default='no', help_text='Минимальная тощина в кирпичах для 1 этажного дома', max_length=3),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='min_pix_2_floor',
            field=models.CharField(choices=[('1', '1'), ('1.5', '1,5'), ('2', '2'), ('2.5', '2,5'), ('3', '3'), ('no', 'Не применимо')], default='no', help_text='Минимальная тощина в кирпичах для 2-х этажного дома', max_length=3),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='min_pix_3_floor',
            field=models.CharField(choices=[('1', '1'), ('1.5', '1,5'), ('2', '2'), ('2.5', '2,5'), ('3', '3'), ('no', 'Не применимо')], default='no', help_text='Минимальная тощина в кирпичах для 3-х этажного дома', max_length=3),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='num_floors_on_work_size_1',
            field=models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('0', 'Нет')], default='0', help_text='Сколько этажей можно постороить на этом размере', max_length=1),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='num_floors_on_work_size_2',
            field=models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('0', 'Нет')], default='0', help_text='Сколько этажей можно постороить на этом размере', max_length=1),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='num_floors_on_work_size_3',
            field=models.CharField(choices=[('1', '1'), ('2', '2'), ('3', '3'), ('0', 'Нет')], default='0', help_text='Сколько этажей можно постороить на этом размере', max_length=1),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='partition_or_bearing',
            field=models.CharField(choices=[('partition', 'Перегородочный'), ('bearing', 'Несущий'), ('any', 'Любой')], default='bearing', help_text='Для несущих стен, для перегородок или для всего', max_length=9),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='work_size_1',
            field=models.CharField(choices=[('a', 'А'), ('b', 'В'), ('c', 'С'), ('no', 'Нет')], default='no', help_text='Выберите первый рабочий размер, если есть', max_length=2),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='work_size_2',
            field=models.CharField(choices=[('a', 'А'), ('b', 'В'), ('c', 'С'), ('no', 'Нет')], default='no', help_text='Выберите второй рабочий размер, если есть', max_length=2),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='work_size_3',
            field=models.CharField(choices=[('a', 'А'), ('b', 'В'), ('c', 'С'), ('no', 'Нет')], default='no', help_text='Выберите третий рабочий размер, если есть', max_length=2),
        ),
        migrations.AlterField(
            model_name='rockwallmaterialunit',
            name='brand',
            field=models.ForeignKey(blank=True, help_text='Выберите бренд, являющийся владельцем торговой марки, например, Wienerberger', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.ProductBrand'),
        ),
        migrations.AlterField(
            model_name='rockwallmaterialunit',
            name='greater_bed_size',
            field=models.IntegerField(blank=True, help_text='Больший размер постели (длина), мм. (размер А)', null=True),
        ),
        migrations.AlterField(
            model_name='rockwallmaterialunit',
            name='height',
            field=models.IntegerField(blank=True, help_text='Высота (толщина), мм. (размер С), или наименьший размер, если постель не очевидна', null=True),
        ),
        migrations.AlterField(
            model_name='rockwallmaterialunit',
            name='material',
            field=models.CharField(choices=[('clay', 'глиняный'), ('silicate', 'силикатный'), ('clinker', 'клинкерный'), ('gas_concrete', 'газобетонный'), ('ceramsite_concrete', 'керамзитобетонный')], default='clay', help_text='Материал изделия', max_length=18),
        ),
        migrations.AlterField(
            model_name='rockwallmaterialunit',
            name='minor_bed_size',
            field=models.IntegerField(blank=True, help_text='Меньший размер постели (ширина), мм. (размер В)', null=True),
        ),
        migrations.RenameModel(
            old_name='ProductBrand',
            new_name='Brand',
        ),
        migrations.DeleteModel(
            name='BinderSolution',
        ),
        migrations.DeleteModel(
            name='Customization',
        ),
        migrations.DeleteModel(
            name='Grid',
        ),
        migrations.DeleteModel(
            name='GridUsage',
        ),
        migrations.DeleteModel(
            name='MasonryBonding',
        ),
        migrations.DeleteModel(
            name='PorothermSystem',
        ),
        migrations.DeleteModel(
            name='Provider',
        ),
        migrations.DeleteModel(
            name='ProviderActivityType',
        ),
        migrations.DeleteModel(
            name='ProviderOutlet',
        ),
        migrations.DeleteModel(
            name='TaxSystemType',
        ),
        migrations.AddField(
            model_name='tradename',
            name='brand',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.Brand'),
        ),
        migrations.AddField(
            model_name='tradeindex',
            name='tradename',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.TradeName'),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='algorithm',
            field=models.ForeignKey(blank=True, help_text='Выберите алгоритм для расчета', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.Algorithm'),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='trade_index',
            field=models.ForeignKey(blank=True, help_text='Выберите индекс внутри наименования (если есть), например, 44 для поротерма', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.TradeIndex'),
        ),
        migrations.AddField(
            model_name='rockwallmaterialunit',
            name='trade_name',
            field=models.ForeignKey(blank=True, help_text='Выберите наименование внутри бренда (если есть), например,  Porotherm', null=True, on_delete=django.db.models.deletion.SET_NULL, to='catalog.TradeName'),
        ),
    ]
